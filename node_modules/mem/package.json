{
  "_args": [
    [
      {
        "raw": "mem@^4.0.0",
        "scope": null,
        "escapedName": "mem",
        "name": "mem",
        "rawSpec": "^4.0.0",
        "spec": ">=4.0.0 <5.0.0",
        "type": "range"
      },
      "D:\\coco\\ES6零基础教学 解析彩票项目（下载街 xiazaij.com）\\es6\\node_modules\\yargs\\node_modules\\os-locale"
    ]
  ],
  "_from": "mem@^4.0.0",
  "_hasShrinkwrap": false,
  "_id": "mem@4.1.0",
  "_location": "/mem",
  "_nodeVersion": "10.15.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mem_4.1.0_1548837927747_0.5551694125271442"
  },
  "_npmUser": {
    "name": "sindresorhus",
    "email": "sindresorhus@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mem@^4.0.0",
    "scope": null,
    "escapedName": "mem",
    "name": "mem",
    "rawSpec": "^4.0.0",
    "spec": ">=4.0.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/yargs/os-locale"
  ],
  "_resolved": "https://registry.npmjs.org/mem/-/mem-4.1.0.tgz",
  "_shasum": "aeb9be2d21f47e78af29e4ac5978e8afa2ca5b8a",
  "_shrinkwrap": null,
  "_spec": "mem@^4.0.0",
  "_where": "D:\\coco\\ES6零基础教学 解析彩票项目（下载街 xiazaij.com）\\es6\\node_modules\\yargs\\node_modules\\os-locale",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/mem/issues"
  },
  "dependencies": {
    "map-age-cleaner": "^0.1.1",
    "mimic-fn": "^1.0.0",
    "p-is-promise": "^2.0.0"
  },
  "description": "Memoize functions - An optimization used to speed up consecutive function calls by caching the result of calls with identical input",
  "devDependencies": {
    "ava": "^1.0.1",
    "delay": "^4.1.0",
    "xo": "^0.23.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-I5u6Q1x7wxO0kdOpYBB28xueHADYps5uty/zg936CiG8NTe5sJL8EjrCuLneuDW3PlMdZBGDIn8BirEVdovZvg==",
    "shasum": "aeb9be2d21f47e78af29e4ac5978e8afa2ca5b8a",
    "tarball": "https://registry.npmjs.org/mem/-/mem-4.1.0.tgz",
    "fileCount": 4,
    "unpackedSize": 7038,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcUWQoCRA9TVsSAnZWagAA43sP/08xJjQxRmTXifguY+6t\nZ2aXdFgHJwTgNQ1B+iJoFGpmZqFLnn+5qEFCYJYRPMCowRtcvXFpn15tFc3k\nDrf3nulFUVNXJvWkqA4So8x15da/V2YMs999VLs50SyHmEJUReNWxENRLMij\nRSJlg6bufzS+lC+WPCBIpDi1KLSMJYc2NOgj1O9MVmKLL6GIXgfCnLNS0wFp\nXDeXWjFqJvv2I4rhaHevH+T7cpGZveZiVbYLDzUvnoPe9fmiKrDQCrz7Bvml\n0vHCILgXPcb353Jhvs2YPYununVpycoYDNIKdAvYGpssMAean/WJY4jLidq3\nuJUHlA5QzQmtR9QqNIZBKzMxhAe2RrbrTn7Xu8C7c7DVN/3WTCcfzbWXK3/+\nZt07aIX2lo8r8Fo/b21JEG0fby7cVd0LYotcddhCi7nEThGu81Vwi8Wqr8z9\nGWrQrNzn3jN7HV3t10wxCO64YtzXcM/Ak+RBuuGmfah0WcMI0okrYkda30uc\nlc0xipd90XoHB2NeA8c93NT4PpF6HlEJme+xSQgtX4RQDGYI6KyPoxo8dcTo\n5Lu+Vjnr9K18plLe31ePxfuotwldpGOGlTNCmVhOtz7wf5IqbSt19cHaxida\nNVbult6zzr1nWGfaS0RfwfI0YQIJ410DJilZJyMH6nmM0HcaeXuKj8+hqlPR\ndcGD\r\n=f+8V\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "a583160e36a088d565a82d11dfea3e78755cca18",
  "homepage": "https://github.com/sindresorhus/mem#readme",
  "keywords": [
    "memoize",
    "function",
    "mem",
    "memoization",
    "cache",
    "caching",
    "optimize",
    "performance",
    "ttl",
    "expire",
    "promise"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    }
  ],
  "name": "mem",
  "optionalDependencies": {},
  "readme": "# mem [![Build Status](https://travis-ci.org/sindresorhus/mem.svg?branch=master)](https://travis-ci.org/sindresorhus/mem)\n\n> [Memoize](https://en.wikipedia.org/wiki/Memoization) functions - An optimization used to speed up consecutive function calls by caching the result of calls with identical input\n\nMemory is automatically released when an item expires.\n\n\n## Install\n\n```\n$ npm install mem\n```\n\n\n## Usage\n\n```js\nconst mem = require('mem');\n\nlet i = 0;\nconst counter = () => ++i;\nconst memoized = mem(counter);\n\nmemoized('foo');\n//=> 1\n\n// Cached as it's the same arguments\nmemoized('foo');\n//=> 1\n\n// Not cached anymore as the arguments changed\nmemoized('bar');\n//=> 2\n\nmemoized('bar');\n//=> 2\n```\n\n##### Works fine with promise returning functions\n\n```js\nconst mem = require('mem');\n\nlet i = 0;\nconst counter = async () => ++i;\nconst memoized = mem(counter);\n\n(async () => {\n\tconsole.log(await memoized());\n\t//=> 1\n\n\t// The return value didn't increase as it's cached\n\tconsole.log(await memoized());\n\t//=> 1\n})();\n```\n\n```js\nconst mem = require('mem');\nconst got = require('got');\nconst delay = require('delay');\n\nconst memGot = mem(got, {maxAge: 1000});\n\n(async () => {\n\tawait memGot('sindresorhus.com');\n\n\t// This call is cached\n\tawait memGot('sindresorhus.com');\n\n\tawait delay(2000);\n\n\t// This call is not cached as the cache has expired\n\tawait memGot('sindresorhus.com');\n})();\n```\n\n\n## API\n\n### mem(fn, [options])\n\n#### fn\n\nType: `Function`\n\nFunction to be memoized.\n\n#### options\n\nType: `Object`\n\n##### maxAge\n\nType: `number`<br>\nDefault: `Infinity`\n\nMilliseconds until the cache expires.\n\n##### cacheKey\n\nType: `Function`\n\nDetermines the cache key for storing the result based on the function arguments. By default, if there's only one argument and it's a [primitive](https://developer.mozilla.org/en-US/docs/Glossary/Primitive), it's used directly as a key, otherwise it's all the function arguments JSON stringified as an array.\n\nYou could for example change it to only cache on the first argument `x => JSON.stringify(x)`.\n\n##### cache\n\nType: `Object`<br>\nDefault: `new Map()`\n\nUse a different cache storage. Must implement the following methods: `.has(key)`, `.get(key)`, `.set(key, value)`, `.delete(key)`, and optionally `.clear()`. You could for example use a `WeakMap` instead or [`quick-lru`](https://github.com/sindresorhus/quick-lru) for a LRU cache.\n\n##### cachePromiseRejection\n\nType: `boolean`<br>\nDefault: `false`\n\nCache rejected promises.\n\n### mem.clear(fn)\n\nClear all cached data of a memoized function.\n\n#### fn\n\nType: `Function`\n\nMemoized function.\n\n\n## Tips\n\n### Cache statistics\n\nIf you want to know how many times your cache had a hit or a miss, you can make use of [stats-map](https://github.com/SamVerschueren/stats-map) as a replacement for the default cache.\n\n#### Example\n\n```js\nconst mem = require('mem');\nconst StatsMap = require('stats-map');\nconst got = require('got');\n\nconst cache = new StatsMap();\nconst memGot = mem(got, {cache});\n\n(async () => {\n\tawait memGot('sindresorhus.com');\n\tawait memGot('sindresorhus.com');\n\tawait memGot('sindresorhus.com');\n\n\tconsole.log(cache.stats);\n\t//=> {hits: 2, misses: 1}\n})();\n```\n\n\n## Related\n\n- [p-memoize](https://github.com/sindresorhus/p-memoize) - Memoize promise-returning & async functions\n\n\n## License\n\nMIT © [Sindre Sorhus](https://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/mem.git"
  },
  "scripts": {
    "test": "xo && ava"
  },
  "version": "4.1.0"
}
