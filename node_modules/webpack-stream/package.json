{
  "_args": [
    [
      {
        "raw": "webpack-stream",
        "scope": null,
        "escapedName": "webpack-stream",
        "name": "webpack-stream",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\coco\\ES6零基础教学 解析彩票项目（下载街 xiazaij.com）\\es6"
    ]
  ],
  "_from": "webpack-stream",
  "_hasShrinkwrap": false,
  "_id": "webpack-stream@5.2.1",
  "_location": "/webpack-stream",
  "_nodeVersion": "8.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/webpack-stream_5.2.1_1543798935509_0.7253154925927197"
  },
  "_npmUser": {
    "name": "shama",
    "email": "kyle@dontkry.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {
    "ansi-colors": "1.1.0",
    "arr-diff": "4.0.0",
    "arr-union": "3.1.0",
    "extend-shallow": "3.0.2"
  },
  "_requested": {
    "raw": "webpack-stream",
    "scope": null,
    "escapedName": "webpack-stream",
    "name": "webpack-stream",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/webpack-stream/-/webpack-stream-5.2.1.tgz",
  "_shasum": "35c992161399fe8cad9c10d4a5c258f022629b39",
  "_shrinkwrap": null,
  "_spec": "webpack-stream",
  "_where": "D:\\coco\\ES6零基础教学 解析彩票项目（下载街 xiazaij.com）\\es6",
  "author": {
    "name": "Kyle Robinson Young",
    "email": "kyle@dontkry.com",
    "url": "http://dontkry.com"
  },
  "bugs": {
    "url": "https://github.com/shama/webpack-stream/issues"
  },
  "dependencies": {
    "fancy-log": "^1.3.3",
    "lodash.clone": "^4.3.2",
    "lodash.some": "^4.2.2",
    "memory-fs": "^0.4.1",
    "plugin-error": "^1.0.1",
    "supports-color": "^5.5.0",
    "through": "^2.3.8",
    "vinyl": "^2.1.0",
    "webpack": "^4.26.1"
  },
  "description": "Run webpack as a stream",
  "devDependencies": {
    "gulp": "^3.9.0",
    "rimraf": "^2.4.4",
    "semistandard": "^13.0.1",
    "tape": "^4.9.0",
    "vinyl-fs": "^3.0.2",
    "vinyl-named": "^1.1.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-WvyVU0K1/VB1NZ7JfsaemVdG0PXAQUqbjUNW4A58th4pULvKMQxG+y33HXTL02JvD56ko2Cub+E2NyPwrLBT/A==",
    "shasum": "35c992161399fe8cad9c10d4a5c258f022629b39",
    "tarball": "https://registry.npmjs.org/webpack-stream/-/webpack-stream-5.2.1.tgz",
    "fileCount": 3,
    "unpackedSize": 16335,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcBICYCRA9TVsSAnZWagAA9LoP/iawWA+Zh/92gSP/8M1I\nmU81kZ9FzkzHHyQBAxrHzyY0kL7lteazwc9Zr5Eo2UeRSe4ewBZ7veknBd7+\n9ObNuNLsQ5wFfLo3ZBpqqIPbo+ltyOU6Ap+nNQCQkqEFYGHPfDcR+fP9e164\nDJrHTz5Q85R+Vwr/QzHLoJqjhjr0T3WGlucm5QdexkKaikVnBQ0ZsUDFn+BF\n3F63U2c1u088cRbvrexiLKI1CDd3n/J/7XU+cquOvRlrrYXQkL1qoqo8hIPT\nSAoJJIXXegO0iIcH/F0gFIvSIruXxQclN9TLwUjmChtQNbk02K2co+9rBnuv\nX4z/qBX7q9/K2Ypnk5RJaTnK9t8qaYaGWvLN8hsM4BbrLrAmlTWEvqVQrbpo\nok3Y09k+t3F/daBSIDIRspLQ4EJ//Gk0aWhCMHpk+YOOP/3lM8WmCtLKHz9k\nTu4RVFNvDcl7Bkxr5Cbv46CqHV039Wkv0GHoXuvZzzTAcrBgNNltqf7jmtpK\nxTah1zTQxZxZoIj/eKK/DNXyFUHj46M8kh6Mo++rgeY75W92q5p603zNqbn4\nOQBEO2IrjWGb8U3WJPZvLgywoJdzleL7wr5KrTsBAbCPCLVv92QphGpRFCc9\nco+EBj/OMilpDz8V3Chec8Qsci+ztuBb6EtmWv7rmTiJRoqbDXhE/iPik5Kk\nL7qf\r\n=Z0Tx\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 6.11.5"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "fa9a5b24d056cf99ddc2ee8e79b7390c294209a0",
  "homepage": "https://github.com/shama/webpack-stream",
  "keywords": [
    "gulpplugin",
    "webpack",
    "stream"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "shama",
      "email": "kyle@dontkry.com"
    }
  ],
  "name": "webpack-stream",
  "optionalDependencies": {},
  "readme": "# webpack-stream [![Build Status](http://img.shields.io/travis/shama/webpack-stream.svg)](https://travis-ci.org/shama/webpack-stream)\n\nRun [webpack](https://github.com/webpack/webpack) as a stream to conveniently integrate with gulp.\n\n[![NPM](https://nodei.co/npm/webpack-stream.png?downloads=true)](https://nodei.co/npm/webpack-stream/)\n\n\n## Installation\nIf you have `npm` run the following command in the console `npm install --save-dev webpack-stream`\n\n\n## Usage\n\n```js\nconst gulp = require('gulp');\nconst webpack = require('webpack-stream');\ngulp.task('default', function() {\n  return gulp.src('src/entry.js')\n    .pipe(webpack())\n    .pipe(gulp.dest('dist/'));\n});\n```\n\nThe above will compile `src/entry.js` into assets with webpack into `dist/` with the output filename of `[hash].js` (webpack generated hash of the build).\n\nYou can pass webpack options in with the first argument, including `watch` which will greatly decrease compilation times:\n\n```js\nreturn gulp.src('src/entry.js')\n  .pipe(webpack({\n    watch: true,\n    module: {\n      rules: [\n        { test: /\\.css$/, loader: 'style!css' },\n      ],\n    },\n  }))\n  .pipe(gulp.dest('dist/'));\n```\n\nOr just pass in your `webpack.config.js`:\n\n```js\nreturn gulp.src('src/entry.js')\n  .pipe(webpack( require('./webpack.config.js') ))\n  .pipe(gulp.dest('dist/'));\n```\n\nIf you would like to use a different version of webpack than the one this plugin uses, pass in an optional 2nd argument:\n\n```js\nconst gulp = require('gulp');\nconst webpack = require('webpack');\nconst gulpWebpack = require('webpack-stream');\ngulp.task('default', function() {\n  return gulp.src('src/entry.js')\n    .pipe(gulpWebpack({}, webpack))\n    .pipe(gulp.dest('dist/'));\n});\n```\n\nPass in 3rd argument if you want to access the stats outputted from webpack when the compilation is done:\n\n\n```js\nconst gulp = require('gulp');\nconst webpack = require('webpack-stream');\ngulp.task('default', function() {\n  return gulp.src('src/entry.js')\n    .pipe(webpack({\n      /* config */\n    }, null, function(err, stats) {\n      /* Use stats to do more things if needed */\n    }))\n    .pipe(gulp.dest('dist/'));\n});\n```\n\n#### Usage with gulp watch\n\nTo use gulp `watch`, it's required that you explicitly pass webpack in the 2nd argument for a cached `compiler` instance to be used on subsequent runs.\n\nPlease note that gulp `watch` and webpack `watch` are mutually exclusive.\n\n```javascript\nvar gulp = require('gulp');\nvar compiler = require('webpack');\nvar webpack = require('webpack-stream');\n\ngulp.task('build', function() {\n  return gulp.src('src/entry.js')\n    .pipe(webpack({\n      /* config */\n    }, compiler, function(err, stats) {\n      /* Use stats to do more things if needed */\n    }))\n    .pipe(gulp.dest('dist/'));\n});\n\ngulp.task('default', ['build'], function() {\n  gulp.watch(['src/**/*.js'], ['build']);\n});\n\n```\n\n#### Multiple Entry Points\n\nA common request is how to handle multiple entry points. You can continue to pass in an `entry` option in your typical webpack config like so:\n\n```js\nconst gulp = require('gulp');\nconst webpack = require('webpack-stream');\ngulp.task('default', function() {\n  return gulp.src('src/entry.js')\n    .pipe(webpack({\n      entry: {\n        app: 'src/app.js',\n        test: 'test/test.js',\n      },\n      output: {\n        filename: '[name].js',\n      },\n    }))\n    .pipe(gulp.dest('dist/'));\n});\n```\n\nOr pipe files through a stream that names the chunks. A convenient library for this is [vinyl-named](https://github.com/shama/vinyl-named):\n\n```js\nconst gulp = require('gulp');\nconst webpack = require('webpack-stream');\nconst named = require('vinyl-named');\ngulp.task('default', function() {\n  return gulp.src(['src/app.js', 'test/test.js'])\n    .pipe(named())\n    .pipe(webpack())\n    .pipe(gulp.dest('dist/'));\n});\n```\n\nThe above `named()` stream will add a `.named` property to the vinyl files passing through. The `webpack()` stream will read those as entry points and even group entry points with common names together.\n\n#### Source Maps\n\nSource maps are built into webpack, specify a [devtool](https://webpack.github.io/docs/configuration.html#devtool):\n\n```js\nconst gulp = require('gulp');\nconst webpack = require('webpack-stream');\nconst named = require('vinyl-named');\ngulp.task('default', function() {\n  return gulp.src(['src/app.js', 'test/test.js'])\n    .pipe(named())\n    .pipe(webpack({\n      devtool: 'source-map'\n    }))\n    .pipe(gulp.dest('dist/'));\n});\n```\n\nNow the appropriate `.map` files will be emitted. Or set to `inline-source-map`\nto inline the source maps into the files.\n\nIf you need further special handling of source maps, such as using with\n[gulp-sourcemaps](https://github.com/floridoo/gulp-sourcemaps) then just pipe\nto a stream and handle the source map files emitted by webpack:\n\n```js\nconst gulp = require('gulp');\nconst webpack = require('webpack-stream');\nconst named = require('vinyl-named');\nconst through = require('through2');\nconst sourcemaps = require('gulp-sourcemaps');\ngulp.task('default', function() {\n  return gulp.src(['src/app.js', 'test/test.js'])\n    .pipe(named())\n    .pipe(webpack({\n      devtool: 'source-map'\n    }))\n    .pipe(sourcemaps.init({loadMaps: true}))\n    .pipe(through.obj(function (file, enc, cb) {\n      // Dont pipe through any source map files as it will be handled\n      // by gulp-sourcemaps\n      const isSourceMap = /\\.map$/.test(file.path);\n      if (!isSourceMap) this.push(file);\n      cb();\n    }))\n    .pipe(sourcemaps.write('.'))\n    .pipe(gulp.dest('dist/'));\n});\n```\n\n#### Multi-compiler support\n\nMultiple compilers are supported, but instead of passing the webpack configuration directly, you have to wrap it in an object under the key 'config'.\n\n```js\nconst gulp = require('gulp');\nconst webpack = require('webpack-stream');\ngulp.task('default', function() {\n  return gulp.src('src/entry.js')\n    .pipe(webpack({\n      config : require('./webpack.config.js')\n    }))\n    .pipe(gulp.dest('dist/'));\n});\n```\n\n## Release History\n* Please check the [commit log](https://github.com/shama/webpack-stream/commits/master) in the future for release history.\n* 4.0.0 - Update `webpack` to `^3.4.1`. Update `memory-fs` and `vinyl` dependencies. Emit `compilation-error` instead of `error` when watching (@jeroennoten). Fix error when compiler throws an error (@renminghao). Fix error when stats is undefined (@Simek).\n* 3.2.0 - Ability to use multiple compilers (@saschagehlich).\n* 3.1.0 - Better error output (@hi-q).\n* 3.0.1 - Fix fonts being passed through streams (@mattlewis92).\n* 3.0.0 - Remove special handling of source maps. Update dependencies.\n* 2.3.0 - Emit stats.compilation.errors as `error` (@JakeChampion).\n* 2.2.0 - Add support for source maps (@OliverJAsh).\n* 2.1.0 - Avoid modifying options by reference (@shinuza). Replace log with correct package name (@vinnymac).\n* 2.0.0 - Rename to webpack-stream and now it's totally not a gulp plugin.\n* 1.5.0 - Update webpack to 1.9.x (@nmccready). Update other dependencies.\n* 1.4.0 - Update webpack to 1.8.x (@Zolmeister).\n* 1.3.2 - Fix another place with ? in name (@raphaelluchini).\n* 1.3.1 - Fix for paths with ? in their name (@raphaelluchini).\n* 1.3.0 - Updating to webpack >= 1.7.\n* 1.2.0 - Updating to webpack >= 1.5, vinyl >= 0.4, memory-fs >= 0.2.\n* 1.1.2 - Fixes to default stats for logging (@mdreizin).\n* 1.1.1 - Add additional stats to default logging (@mdreizin).\n* 1.1.0 - Exposes internal webpack if asked via `require('webpack-stream').webpack`\n* 1.0.0 - Support named chunks pipe'd in for multiple entry points.\n* 0.4.1 - Fixed regression for multiple entry point support.\n* 0.4.0 - Display an error message if there are no input files (@3onyc). Add message on why task is not finishing, Add ability to track compilation progress, Add ability to configure stats output via options (@kompot). Bump webpack version (@koistya).\n* 0.3.0 - Update deps (@kompot). Fixes to determining entry (@btipling and @abergs).\n* 0.2.0 - Support for `watch` mode (@ampedandwired).\n* 0.1.0 - Initial release\n\n## License\nCopyright (c) 2018 Kyle Robinson Young  \nLicensed under the MIT license.\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/shama/webpack-stream.git"
  },
  "scripts": {
    "test": "semistandard && node test/test.js"
  },
  "semistandard": {
    "ignore": [
      "test/fixtures",
      "examples"
    ]
  },
  "version": "5.2.1"
}
