{
  "_args": [
    [
      {
        "raw": "gulp-live-server",
        "scope": null,
        "escapedName": "gulp-live-server",
        "name": "gulp-live-server",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\coco\\ES6零基础教学 解析彩票项目（下载街 xiazaij.com）\\es6"
    ]
  ],
  "_from": "gulp-live-server@latest",
  "_id": "gulp-live-server@0.0.31",
  "_inCache": true,
  "_location": "/gulp-live-server",
  "_nodeVersion": "7.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/gulp-live-server-0.0.31.tgz_1500082686939_0.897053579101339"
  },
  "_npmUser": {
    "name": "yucc2008",
    "email": "yucc2008@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {
    "duplexer": "0.1.1",
    "escape-string-regexp": "1.0.5",
    "from": "0.1.7",
    "has-ansi": "2.0.0",
    "map-stream": "0.1.0",
    "pause-stream": "0.0.11",
    "split": "0.3.3",
    "stream-combiner": "0.0.4",
    "strip-ansi": "3.0.1",
    "through": "2.3.8"
  },
  "_requested": {
    "raw": "gulp-live-server",
    "scope": null,
    "escapedName": "gulp-live-server",
    "name": "gulp-live-server",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-live-server/-/gulp-live-server-0.0.31.tgz",
  "_shasum": "3b4c186feca0708261718f6c8ace193f198f2d51",
  "_shrinkwrap": null,
  "_spec": "gulp-live-server",
  "_where": "D:\\coco\\ES6零基础教学 解析彩票项目（下载街 xiazaij.com）\\es6",
  "author": {
    "name": "yucc2008@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/gimm/gulp-live-server/issues"
  },
  "dependencies": {
    "chalk": "^1.0.0",
    "connect": "^3.3.4",
    "connect-livereload": "^0.5.3",
    "debug": "^2.1.1",
    "deepmerge": "~0.2.7",
    "event-stream": "~3.2.1",
    "q": "^1.2.0",
    "serve-static": "^1.9.1",
    "tiny-lr": "^1.0.3"
  },
  "description": "easy light weight server with livereload",
  "devDependencies": {
    "gulp": "^3.8.11",
    "mocha": "^2.0.1",
    "should": "^5.2.0",
    "supertest": "^0.15.0"
  },
  "directories": {},
  "dist": {
    "shasum": "3b4c186feca0708261718f6c8ace193f198f2d51",
    "tarball": "https://registry.npmjs.org/gulp-live-server/-/gulp-live-server-0.0.31.tgz"
  },
  "gitHead": "84abc0c4fe612b345404b10fd51420e0a87a88f2",
  "homepage": "https://github.com/gimm/gulp-live-server",
  "keywords": [
    "gulpplugin",
    "server",
    "static",
    "live",
    "livereload",
    "connect",
    "express"
  ],
  "license": "WTFPL",
  "main": "./index.js",
  "maintainers": [
    {
      "name": "yucc2008",
      "email": "yucc2008@gmail.com"
    }
  ],
  "name": "gulp-live-server",
  "optionalDependencies": {},
  "readme": "gulp-live-server\n===\n\n[![status][1]][2] [![downloads][3]][4] [![tag][5]][6] [![license][7]][8]\n\n[1]: http://img.shields.io/travis/gimm/gulp-live-server/master.svg?style=flat-square\n[2]: https://travis-ci.org/gimm/gulp-live-server\n\n[3]: http://img.shields.io/npm/dm/gulp-live-server.svg?style=flat-square\n[4]: https://www.npmjs.com/package/gulp-live-server\n\n[5]: https://img.shields.io/github/tag/gimm/gulp-live-server.svg?style=flat-square\n[6]: https://github.com/gimm/gulp-live-server/releases\n\n[7]: http://img.shields.io/badge/license-WTFPL-blue.svg?style=flat-square\n[8]: http://www.wtfpl.net\n\nA handy, light-weight server you're going to love.\n\n- [Install](#install)\n- [Usage](#usage)\n- [API](#api)\n    - [static](#staticfolder-port)\n    - [new](#newscript)\n    - [gls](#glsargs-options-livereload)\n    - [start](#start)\n    - [stop](#stop)\n    - [notify](#notifyevent)\n- [livereload.js](#livereloadjs)\n- [Debug](#debug)\n\nInstall\n---\n[![NPM](https://nodei.co/npm/gulp-live-server.png?compact=true)](https://nodei.co/npm/gulp-live-server/)\n\nUsage\n---\n- Serve a static folder(`gls.script`<'scripts/static.js'> is used as server script)\n\n  ```js\n    var gulp = require('gulp');\n    var gls = require('gulp-live-server');\n    gulp.task('serve', function() {\n      //1. serve with default settings\n      var server = gls.static(); //equals to gls.static('public', 3000);\n      server.start();\n\n      //2. serve at custom port\n      var server = gls.static('dist', 8888);\n      server.start();\n\n      //3. serve multi folders\n      var server = gls.static(['dist', '.tmp']);\n      server.start();\n\n      //use gulp.watch to trigger server actions(notify, start or stop)\n      gulp.watch(['static/**/*.css', 'static/**/*.html'], function (file) {\n        server.notify.apply(server, [file]);\n      });\n    });\n    ```\n- Serve with your own script file\n\n  ```js\n    gulp.task('serve', function() {\n      //1. run your script as a server\n      var server = gls.new('myapp.js');\n      server.start();\n\n      //2. run script with cwd args, e.g. the harmony flag\n      var server = gls.new(['--harmony', 'myapp.js']);\n      //this will achieve `node --harmony myapp.js`\n      //you can access cwd args in `myapp.js` via `process.argv`\n      server.start();\n\n      //use gulp.watch to trigger server actions(notify, start or stop)\n      gulp.watch(['static/**/*.css', 'static/**/*.html'], function (file) {\n        server.notify.apply(server, [file]);\n      });\n      gulp.watch('myapp.js', server.start.bind(server)); //restart my server\n      \n      // Note: try wrapping in a function if getting an error like `TypeError: Bad argument at TypeError (native) at ChildProcess.spawn`\n      gulp.watch('myapp.js', function() {\n        server.start.bind(server)()\n      });\n    });\n    ```\n\n- Customized serving with gls\n\n  ```js\n    gulp.task('serve', function() {\n      //1. gls is the base for `static` and `new`\n      var server = gls([gls.script, 'static', 8000]);\n      //equals gls.new([gls.script, 'static', 8000]);\n      //equals gls.static('static', 8000);\n      server.start();\n\n      //2. set running options for the server, e.g. NODE_ENV\n      var server = gls('myapp.js', {env: {NODE_ENV: 'development'}});\n      server.start();\n\n      //3. customize livereload server, e.g. port number\n      var server = gls('myapp.js', undefined, 12345);\n      var promise = server.start();\n      //optionally handle the server process exiting\n      promise.then(function(result) {\n        //log, exit, re-start, etc...\n      });\n\n      //4. start with coffee-script executable e.g. installed with npm\n      var server = gls('myapp.coffee');\n      server.start('node_modules/coffee-script/bin/coffee');\n\n      //use gulp.watch to trigger server actions(notify, start or stop)\n      gulp.watch(['static/**/*.css', 'static/**/*.html'], function (file) {\n        server.notify.apply(server, [file]);\n      });\n      gulp.watch('myapp.js', server.start.bind(server)); //restart my server\n      \n      // Note: try wrapping in a function if getting an error like `TypeError: Bad argument at TypeError (native) at ChildProcess.spawn`\n      gulp.watch('myapp.js', function() {\n        server.start.bind(server)()\n      });\n    });\n    ```\n\nAPI\n---\n### static([folder][, port])\n- `folder` - `String|Array` The folder(s) to serve.\n    Use array of strings if there're multi folders to serve.\n    If omitted, defaults to `public/`.\n- `port` - `Number` The port to listen on. Defaults to `3000`.\n- return [gls](#glsargs-options-livereload).\n\nConfig new server using the [default server script](https://github.com/gimm/gulp-live-server/blob/master/scripts/static.js), to serve the given `folder` on the specified `port`.\n\n### new(script)\n- `script` - `String` The script file to run.\n- return [gls](#glsargs-options-livereload).\n\nConfig new server using the given `script`.\n\n### gls(args[, options][, livereload])\n- `args` - `String|Array` The 2nd param for [ChildProcess.spawn](http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options).\n- `options` - `Object` The 3rd param for [ChildProcess.spawn](http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options),\nwill be mixin into the default value:\n\n    ```js\n        options = {\n            cwd: undefined\n        }\n        options.env = process.env;\n        options.env.NODE_ENV = 'development';\n    ```\n- `livereload` - `Boolean|Number|Object` The option for tiny-lr server. The default value is `35729`.\n    - `false` - will disable tiny-lr livereload server.\n    - `number` - treated as port number of livereload server.\n    - `object` - used to create tiny-lr server new tinylr.Server(livereload);\n\n**`gls` here is a reference of `var gls = require('gulp-live-server')`**. It aims to assemble configuration for the server child process as well as the tiny-lr server.\n**`static` and `new` are just shortcuts for this.**\nUsually, `static` and `new` will serve you well, but you can get more customized server with `gls`.\n\n### start([execPath])\n- `execPath` - `String` The executable that is used to start the server. If none is given the current node executable is used.\n- return [promise](https://github.com/kriskowal/q/wiki/API-Reference) from [Q](https://www.npmjs.com/package/q), resolved with the server process exits.\n\nSpawn a new child process based on the configuration.\n- use [`ChildProcess.spawn`](http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options) to start a node process;\n- use [`tiny-lr`](https://github.com/mklabs/tiny-lr) provide livereload ability;\n\n### stop()\n- return [promise](https://github.com/kriskowal/q/wiki/API-Reference) from [Q](https://www.npmjs.com/package/q)\n\nStop the server.\n\n### notify([event])\n- `event` - `Event` Event object passed along with [gulp.watch](https://github.com/gulpjs/gulp/blob/master/docs/API.md#cbevent).\nOptional when used with `pipe`.\n\nTell livereload.js to reload the changed resource(s)\n\nlivereload.js\n---\ngulp-live-server comes with [tiny-lr](https://github.com/mklabs/tiny-lr/) built in, which works as a livereload server. `livereload.js` is **served** by `tiny-lr`, but in order to get it loaded with your page, you have 3 options( to **inject** `<script src=\"//localhost:35729/livereload.js\"></script>` into your page):\n- [LiveReload](https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei?hl=en) for Chrome;\n- Use [connect-livereload](https://github.com/intesso/connect-livereload) middleware;\n- Add [livereload.js](https://github.com/livereload/livereload-js) in your page manually;\n\nUsually, if `http://localhost:35729/livereload.js` is accessible, then your livereload server is ok, if you don't have the script tag for livereload.js in you page, you've problem with either your chrome plugin or the connect-livereload middle-ware as mentioned above.\n\nDEBUG\n---\nIf you want more output, set the `DEBUG` environment variables to `*` or `gulp-live-server`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/gimm/gulp-live-server.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.0.31"
}
